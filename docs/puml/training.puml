@startuml

set namespaceseparator none
skinparam dpi 96
skinparam ArrowColor Black
skinparam shadowing true
skinparam class {
  backgroundColor Business
  borderColor Red
}

package pytorch #DDDDDD {}
package tket #DDDDDD {}
package pennylane #DDDDDD {}

abstract class Model {
    symbols
    weights
    {abstract} initialise_weights()
    {abstract}{static} from_checkpoint()
    {abstract} get_diagram_output()
    {abstract} forward()
    {static} from diagrams()
}

abstract class Trainer {
    backend
    model
    load_training_checkpoint()
    save_checkpoint()
    {abstract} training_step()
    {abstract} validation_step()
    fit()
}

abstract class Optimiser {
    model
    {abstract} backward()
    {abstract} step()
    {abstract} state_dict()
    {abstract} load_state_dict()
    zero_grad()
}

class Dataset {
    data
    targets
    batch_size
    shuffle
    {static} shuffle_data()
}

class CheckPoint {
    entries
    add_many()
    {static} from_file()
    to_file()
}

class PytorchModel {}
class PennyLaneModel {}
class NumpyModel {
    use_jit
    lambdas
}
class TketModel {}
class QuantumModel {}

class QuantumTrainer {
    optimiser
}

class PytorchTrainer {
    optimiser
}

class SPSAOptimiser {}

Model <|-- PytorchModel
PytorchModel <|-- PennyLaneModel
Model <|-- QuantumModel
QuantumModel <|-- TketModel
QuantumModel <|-- NumpyModel
Trainer <|-- PytorchTrainer
Trainer <|-- QuantumTrainer

Optimiser <|-- SPSAOptimiser

PennyLaneModel -- pennylane
PytorchModel -- pytorch
PytorchTrainer -- pytorch
TketModel -- tket
QuantumTrainer -- tket

Trainer *-- CheckPoint
CheckPoint --* Model
Trainer::model *- Model
Model *-u- Dataset
Model -* Optimiser::model
Optimiser -- Trainer

PennyLaneModel -- PytorchTrainer: usedWith
PytorchModel -- PytorchTrainer: usedWith
NumpyModel -- QuantumTrainer: usedWith
TketModel -- QuantumTrainer: usedWith
SPSAOptimiser -- QuantumModel: usedWith

@enduml
